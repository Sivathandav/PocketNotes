{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nimport { storage } from '../services/storage';\nimport { STORAGE_KEYS, COLORS } from '../utils/constants';\nimport { getInitials, formatDateTime } from '../utils/helpers';\nexport const useGroups = () => {\n  _s();\n  const [groups, setGroups] = useState(() => storage.get(STORAGE_KEYS.GROUPS));\n  const saveGroups = useCallback(newGroups => {\n    setGroups(newGroups);\n    storage.set(STORAGE_KEYS.GROUPS, newGroups);\n  }, []);\n  const createGroup = useCallback((name, color) => {\n    if (name.trim().length < 2) throw new Error('Group name must be at least 2 characters');\n    if (groups.some(g => g.name.toLowerCase() === name.trim().toLowerCase())) throw new Error('Group already exists');\n    const newGroup = {\n      id: Date.now().toString(),\n      name: name.trim(),\n      color,\n      initials: getInitials(name.trim()),\n      createdAt: new Date().toISOString()\n    };\n    saveGroups([...groups, newGroup]);\n    return newGroup;\n  }, [groups, saveGroups]);\n  const updateGroup = useCallback((id, updates) => {\n    const updated = groups.map(g => g.id === id ? {\n      ...g,\n      ...updates\n    } : g);\n    saveGroups(updated);\n  }, [groups, saveGroups]);\n  const deleteGroup = useCallback(id => {\n    saveGroups(groups.filter(g => g.id !== id));\n    const notes = storage.get(STORAGE_KEYS.NOTES);\n    delete notes[id];\n    storage.set(STORAGE_KEYS.NOTES, notes);\n  }, [groups, saveGroups]);\n  return {\n    groups,\n    createGroup,\n    updateGroup,\n    deleteGroup\n  };\n};\n_s(useGroups, \"CnhHKIW7IbfQdrnEDbsjPGbwqek=\");\nexport const useNotes = groupId => {\n  _s2();\n  const [notes, setNotes] = useState([]);\n  useEffect(() => {\n    if (!groupId) return setNotes([]);\n    const allNotes = storage.get(STORAGE_KEYS.NOTES);\n    setNotes(allNotes[groupId] || []);\n  }, [groupId]);\n  const saveNotes = useCallback(newNotes => {\n    if (!groupId) return;\n    const allNotes = storage.get(STORAGE_KEYS.NOTES);\n    allNotes[groupId] = newNotes;\n    storage.set(STORAGE_KEYS.NOTES, allNotes);\n    setNotes(newNotes);\n  }, [groupId]);\n  const addNote = useCallback(content => {\n    const {\n      date,\n      time\n    } = formatDateTime();\n    const newNote = {\n      id: Date.now().toString(),\n      content: content.trim(),\n      date,\n      time,\n      createdAt: new Date().toISOString()\n    };\n    saveNotes([...notes, newNote]);\n  }, [notes, saveNotes]);\n  const updateNote = useCallback((id, content) => {\n    const {\n      date,\n      time\n    } = formatDateTime();\n    const updated = notes.map(n => n.id === id ? {\n      ...n,\n      content: content.trim(),\n      date,\n      time,\n      updatedAt: new Date().toISOString()\n    } : n);\n    saveNotes(updated);\n  }, [notes, saveNotes]);\n  const deleteNote = useCallback(id => {\n    saveNotes(notes.filter(n => n.id !== id));\n  }, [notes, saveNotes]);\n  return {\n    notes,\n    addNote,\n    updateNote,\n    deleteNote\n  };\n};\n_s2(useNotes, \"OBPnhK93qmodTLWJEELEP1nehGg=\");\nexport const useModal = (initial = false) => {\n  _s3();\n  const [isOpen, setIsOpen] = useState(initial);\n  return {\n    isOpen,\n    open: () => setIsOpen(true),\n    close: () => setIsOpen(false),\n    toggle: () => setIsOpen(prev => !prev)\n  };\n};\n_s3(useModal, \"pP2v2K7N7SzJevsFcsbHMGjQ3qY=\");","map":{"version":3,"names":["useState","useEffect","useCallback","storage","STORAGE_KEYS","COLORS","getInitials","formatDateTime","useGroups","_s","groups","setGroups","get","GROUPS","saveGroups","newGroups","set","createGroup","name","color","trim","length","Error","some","g","toLowerCase","newGroup","id","Date","now","toString","initials","createdAt","toISOString","updateGroup","updates","updated","map","deleteGroup","filter","notes","NOTES","useNotes","groupId","_s2","setNotes","allNotes","saveNotes","newNotes","addNote","content","date","time","newNote","updateNote","n","updatedAt","deleteNote","useModal","initial","_s3","isOpen","setIsOpen","open","close","toggle","prev"],"sources":["/Users/sri/Downloads/pocket-notes/src/hooks/useApp.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { storage } from '../services/storage';\nimport { STORAGE_KEYS, COLORS } from '../utils/constants';\nimport { getInitials, formatDateTime } from '../utils/helpers';\n\nexport const useGroups = () => {\n  const [groups, setGroups] = useState(() => storage.get(STORAGE_KEYS.GROUPS));\n\n  const saveGroups = useCallback((newGroups) => {\n    setGroups(newGroups);\n    storage.set(STORAGE_KEYS.GROUPS, newGroups);\n  }, []);\n\n  const createGroup = useCallback((name, color) => {\n    if (name.trim().length < 2) throw new Error('Group name must be at least 2 characters');\n    if (groups.some(g => g.name.toLowerCase() === name.trim().toLowerCase())) \n      throw new Error('Group already exists');\n\n    const newGroup = {\n      id: Date.now().toString(),\n      name: name.trim(),\n      color,\n      initials: getInitials(name.trim()),\n      createdAt: new Date().toISOString()\n    };\n    saveGroups([...groups, newGroup]);\n    return newGroup;\n  }, [groups, saveGroups]);\n\n  const updateGroup = useCallback((id, updates) => {\n    const updated = groups.map(g => g.id === id ? { ...g, ...updates } : g);\n    saveGroups(updated);\n  }, [groups, saveGroups]);\n\n  const deleteGroup = useCallback((id) => {\n    saveGroups(groups.filter(g => g.id !== id));\n    const notes = storage.get(STORAGE_KEYS.NOTES);\n    delete notes[id];\n    storage.set(STORAGE_KEYS.NOTES, notes);\n  }, [groups, saveGroups]);\n\n  return { groups, createGroup, updateGroup, deleteGroup };\n};\n\nexport const useNotes = (groupId) => {\n  const [notes, setNotes] = useState([]);\n\n  useEffect(() => {\n    if (!groupId) return setNotes([]);\n    const allNotes = storage.get(STORAGE_KEYS.NOTES);\n    setNotes(allNotes[groupId] || []);\n  }, [groupId]);\n\n  const saveNotes = useCallback((newNotes) => {\n    if (!groupId) return;\n    const allNotes = storage.get(STORAGE_KEYS.NOTES);\n    allNotes[groupId] = newNotes;\n    storage.set(STORAGE_KEYS.NOTES, allNotes);\n    setNotes(newNotes);\n  }, [groupId]);\n\n  const addNote = useCallback((content) => {\n    const { date, time } = formatDateTime();\n    const newNote = {\n      id: Date.now().toString(),\n      content: content.trim(),\n      date, time,\n      createdAt: new Date().toISOString()\n    };\n    saveNotes([...notes, newNote]);\n  }, [notes, saveNotes]);\n\n  const updateNote = useCallback((id, content) => {\n    const { date, time } = formatDateTime();\n    const updated = notes.map(n => n.id === id ? \n      { ...n, content: content.trim(), date, time, updatedAt: new Date().toISOString() } : n);\n    saveNotes(updated);\n  }, [notes, saveNotes]);\n\n  const deleteNote = useCallback((id) => {\n    saveNotes(notes.filter(n => n.id !== id));\n  }, [notes, saveNotes]);\n\n  return { notes, addNote, updateNote, deleteNote };\n};\n\nexport const useModal = (initial = false) => {\n  const [isOpen, setIsOpen] = useState(initial);\n  return {\n    isOpen,\n    open: () => setIsOpen(true),\n    close: () => setIsOpen(false),\n    toggle: () => setIsOpen(prev => !prev)\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}